# Task ID: 113
# Title: Improve Floating Voice Button Positioning with SafeAreaInset
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Refactor the floating voice button positioning to use safeAreaInset instead of fixed padding to prevent content obstruction on smaller screens and in landscape orientation.
# Details:
This task involves updating the positioning logic for the floating voice button to ensure proper display across all device sizes and orientations:

1. Identify all instances where the floating voice button positioning is currently defined with fixed padding values.

2. Replace fixed padding values with dynamic calculations using SafeAreaInset:
   - Import the necessary SafeArea utilities from the platform-specific libraries
   - For iOS: Use `SafeAreaInsets.bottom` and `SafeAreaInsets.right` 
   - For Android: Implement equivalent functionality using `WindowInsets`

3. Create a responsive positioning system that:
   - Maintains proper distance from screen edges in both portrait and landscape orientations
   - Adjusts position based on available safe area
   - Handles notches, rounded corners, and other device-specific features

4. Implement orientation change listeners to reposition the button when device orientation changes:
   ```javascript
   // Example implementation
   useEffect(() => {
     const handleOrientationChange = () => {
       // Recalculate button position based on new orientation
       const safeArea = getSafeAreaInsets();
       setButtonPosition({
         bottom: safeArea.bottom + 16, // Base padding + safe area
         right: safeArea.right + 16
       });
     };
     
     // Add orientation change listener
     Dimensions.addEventListener('change', handleOrientationChange);
     
     // Initial calculation
     handleOrientationChange();
     
     return () => {
       Dimensions.removeEventListener('change', handleOrientationChange);
     };
   }, []);
   ```

5. Ensure the button remains accessible and visible in all scenarios, particularly:
   - When keyboard is visible
   - During split-screen multitasking
   - On devices with unusual aspect ratios

6. Update any related animations or transitions to work with the new dynamic positioning system.

# Test Strategy:
1. Device Testing:
   - Test on at least 3 different physical device sizes (small, medium, large)
   - Test in both portrait and landscape orientations
   - Test on devices with notches, punch-holes, or other screen irregularities
   - Verify button remains visible and accessible in all scenarios

2. Simulator/Emulator Testing:
   - Use iOS Simulator and Android Emulator to test various device configurations
   - Test with different safe area configurations (notches, rounded corners, etc.)
   - Verify correct positioning across all simulated devices

3. Orientation Change Testing:
   - Rotate devices between portrait and landscape multiple times
   - Verify button smoothly transitions to correct position
   - Check that button remains accessible during and after rotation

4. Edge Case Testing:
   - Test with keyboard open
   - Test in split-screen/multi-window mode
   - Test with system UI elements visible (status bars, navigation bars)
   - Test with system gestures (swipe up for home, etc.)

5. Visual Regression Testing:
   - Compare screenshots before and after implementation
   - Verify button positioning is consistent or improved across all test cases

6. Accessibility Testing:
   - Verify button remains tappable with adequate touch target size
   - Ensure button doesn't obstruct critical UI elements
   - Test with screen readers and other accessibility tools

# Subtasks:
## 1. Audit All Fixed Padding Usages for Floating Voice Button [done]
### Dependencies: None
### Description: Identify every instance in the codebase where the floating voice button uses fixed padding or margin values for positioning.
### Details:
Search for all hardcoded padding or margin values (e.g., 16, 24) applied to the floating voice button in both portrait and landscape layouts. Document each location for refactoring.

## 2. Integrate SafeAreaInset Utilities for Dynamic Positioning [done]
### Dependencies: 113.1
### Description: Replace fixed padding with dynamic calculations using SafeAreaInset or platform-specific equivalents for both iOS and Android.
### Details:
Import SafeAreaInset utilities (e.g., SafeAreaInsets.bottom/right for iOS, WindowInsets for Android). Refactor button positioning logic to use these values plus a base margin (e.g., 16px) instead of fixed padding.

## 3. Implement Responsive Positioning for Orientation and Edge Cases [pending]
### Dependencies: 113.2
### Description: Ensure the button maintains proper distance from screen edges in all orientations and device types, accounting for notches and unusual aspect ratios.
### Details:
Update the positioning logic to recalculate on orientation change and when safe area insets change. Use alignment and spacing options to keep the button visible and unobstructed in all scenarios, including landscape and split-screen modes.

## 4. Add Orientation and Keyboard Visibility Listeners [pending]
### Dependencies: 113.3
### Description: Implement listeners to recalculate button position on orientation changes and when the keyboard appears or disappears.
### Details:
Use event listeners (e.g., Dimensions.addEventListener for React Native or equivalent) to detect orientation and keyboard changes. Trigger repositioning logic to ensure the button remains accessible and visible.

## 5. Update Animations and Validate Accessibility in All Scenarios [pending]
### Dependencies: 113.4
### Description: Refactor any related animations or transitions to work with dynamic positioning and ensure the button is always accessible, including during multitasking and with assistive technologies.
### Details:
Adjust animation logic to use dynamic position values. Test with screen readers and in multitasking modes to confirm the button is never obscured and remains interactive.

